--[[
    GD50
    Super Mario Bros. Remake

    -- LevelMaker Class --

    Author: Colton Ogden
    cogden@cs50.harvard.edu
]]

require 'src/flag'

LevelMaker = Class{}

function LevelMaker.generate(width, height)
    local tiles = {}
    local entities = {}
    local objects = {}

    local tileID = TILE_ID_GROUND
    
    -- whether we should draw our tiles with toppers
    local topper = true
    local tileset = math.random(20)
    local topperset = math.random(20)
	
	--monitor for Key and lock generation as we only want to do it once
	--set colour of block and key to be random
	local isKey = false
	local isKeyBlock = false
	local keyColour = math.random(4)
	

    -- insert blank tables into tiles for later access
    for x = 1, height do
        table.insert(tiles, {})
    end

    -- column by column generation instead of row; sometimes better for platformers
    for x = 1, width do
        local tileID = TILE_ID_EMPTY
        
        -- lay out the empty space
        for y = 1, 6 do
            table.insert(tiles[y],
                Tile(x, y, tileID, nil, tileset, topperset))
        end

        -- chance to just be emptiness
		--don't allow the first column to be anything except ground
        if math.random(7) == 1 and x ~= 1 and not (
			(x == width and (not isKey or not isKeyBlock)) --keep generating ground if we don't have the key or keyBlock yet
		)		then
            for y = 7, height do
                table.insert(tiles[y],
                    Tile(x, y, tileID, nil, tileset, topperset))
            end
        else
            tileID = TILE_ID_GROUND

            local blockHeight = 4

            for y = 7, height do
                table.insert(tiles[y],
                    Tile(x, y, tileID, y == 7 and topper or nil, tileset, topperset))
            end
			
			--ensure key is generated by end of level
			if(math.random(width - x) == 1) and not isKey then
				table.insert(objects,
					GameObject {
						texture = 'keyandblock',
						x = (x - 1) * TILE_SIZE,
						y = (6 - 1) * TILE_SIZE,
						width = 16,
						height = 16,
						
						frame = keyColour,
						collidable = true,
						consumable = true, 
						hit = false,
						solid = false,
						
						onConsume = function(player)
							player.hasKey = true
						end
					}
				)
				
				isKey = true
			

            -- chance to generate a pillar
            elseif math.random(8) == 1 then
                blockHeight = 2
                
                -- chance to generate bush on pillar
                if math.random(8) == 1 then
                    table.insert(objects,
                        GameObject {
                            texture = 'bushes',
                            x = (x - 1) * TILE_SIZE,
                            y = (4 - 1) * TILE_SIZE,
                            width = 16,
                            height = 16,
                            
                            -- select random frame from bush_ids whitelist, then random row for variance
                            frame = BUSH_IDS[math.random(#BUSH_IDS)] + (math.random(4) - 1) * 7
                        }
                    )
                end
                
                -- pillar tiles
                tiles[5][x] = Tile(x, 5, tileID, topper, tileset, topperset)
                tiles[6][x] = Tile(x, 6, tileID, nil, tileset, topperset)
                tiles[7][x].topper = nil
            
            -- chance to generate bushes
            elseif math.random(8) == 1 then
                table.insert(objects,
                    GameObject {
                        texture = 'bushes',
                        x = (x - 1) * TILE_SIZE,
                        y = (6 - 1) * TILE_SIZE,
                        width = 16,
                        height = 16,
                        frame = BUSH_IDS[math.random(#BUSH_IDS)] + (math.random(4) - 1) * 7,
                        collidable = false
                    }
                )
            end

            -- chance to spawn a block
           if(math.random(width - x) == 1) and not isKeyBlock then
				table.insert(objects,
					GameObject {
						texture = 'keyandblock',
						x = (x - 1)* TILE_SIZE,
						y = (blockHeight - 1)  * TILE_SIZE,
						width = 16,
						height = 16,
						
						frame = 4 + keyColour,
						collidable = true,
						consumable = true,
						hit = false,
						solid = true,
						
						onCollide = function(obj) end,
						
						onConsume = function(player)
							if player.hasKey then
							
							local lastGroundX, lastGroundY = findLastGroundTile(player.level)
							
							table.insert(player.level.objects, GameObject {
							texture = 'flagpole',
							x = (lastGroundX - 1) * TILE_SIZE,
							y = (lastGroundY - 3) * TILE_SIZE,
							width = 16,
							height = 64,
							
							frame = math.random(6),
							collidable = true,
							consumable = true,
							hit = false,
							solid = false,
							
							onConsume = function(player)
								player.score = player.score + 1000
								gStateMachine:change('play', {
									width = player.map.width,
									score = player.score
									})
								end
							})
							
							local flagType = math.random(4) * 9 - 2
							table.insert(player.level.objects, Flag {
								texture = 'flag',
								x = (lastGroundX - 1) * TILE_SIZE + 8, --appears at top of the pole
								y = (lastGroundY - 3) * TILE_SIZE + 4, --appears next to the pole
								width = 16,
								height = 16,
								
								animation = Animation(
									{
										frames = {flagType, flagType + 1, flagType + 2},
										interval = 0.5
									}
								)
							})
							
							gSounds['empty-block']:play()
						else
							return true
						end
						
					end
				}
				)
				
				isKeyBlock = true

		   elseif math.random(10) == 1 then
                table.insert(objects,

                    -- jump block
                    GameObject {
                        texture = 'jump-blocks',
                        x = (x - 1) * TILE_SIZE,
                        y = (blockHeight - 1) * TILE_SIZE,
                        width = 16,
                        height = 16,

                        -- make it a random variant
                        frame = math.random(#JUMP_BLOCKS),
                        collidable = true,
                        hit = false,
                        solid = true,

                        -- collision function takes itself
                        onCollide = function(obj)

                            -- spawn a gem if we haven't already hit the block
                            if not obj.hit then

                                -- chance to spawn gem, not guaranteed
                                if math.random(5) == 1 then

                                    -- maintain reference so we can set it to nil
                                    local gem = GameObject {
                                        texture = 'gems',
                                        x = (x - 1) * TILE_SIZE,
                                        y = (blockHeight - 1) * TILE_SIZE - 4,
                                        width = 16,
                                        height = 16,
                                        frame = math.random(#GEMS),
                                        collidable = true,
                                        consumable = true,
                                        solid = false,

                                        -- gem has its own function to add to the player's score
                                        onConsume = function(player, object)
                                            gSounds['pickup']:play()
                                            player.score = player.score + 100
                                        end
                                    }
                                    
                                    -- make the gem move up from the block and play a sound
                                    Timer.tween(0.1, {
                                        [gem] = {y = (blockHeight - 2) * TILE_SIZE}
                                    })
                                    gSounds['powerup-reveal']:play()

                                    table.insert(objects, gem)
                                end

                                obj.hit = true
                            end

                            gSounds['empty-block']:play()
                        end
                    }
                )
            end
        end
    end

    local map = TileMap(width, height)
    map.tiles = tiles
    
    return GameLevel(entities, objects, map)
end

function findLastGroundTile(level)
	for i = level.tileMap.width, 1, -1 do
		for j = 1, level.tileMap.height do
			if level.tileMap.tiles[j][i].id ~= TILE_ID_EMPTY then
				return i, j - 1
			end
		end
	end
	
	
	return 10, 6
end